# -*- coding: utf-8 -*-
"""car mileage prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hUfUziNN68bAdiEPKxH2RZ5GI03IUD_0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv('/content/Car Data India.csv')

print('Shape:', df.shape)
print(df.info())
print(df.describe())

print("Missing values:\n", df.isnull().sum())

plt.figure(figsize=(6,4))
sns.histplot(df['Engine_CC'], bins=20, kde=True)
plt.title('Engine Size Distribution')
plt.show()

plt.figure(figsize=(6,4))
sns.histplot(df['Year'], bins=20, kde=True)
plt.title('Year Distribution')
plt.show()

plt.figure(figsize=(6,4))
sns.histplot(df['Mileage'], bins=20, kde=True)
plt.title('Mileage Distribution')
plt.show()

numeric_cols = ['Year','Engine_CC','Mileage','Seating_Capacity','Price']
corr = df[numeric_cols].corr()
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

df['Approx_Weight'] = df['Engine_CC'] * df['Seating_Capacity'] * 0.5

X = df[['Engine_CC','Year','Approx_Weight']]
y = df['Mileage']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')  # or 'median'
X_train_scaled = imputer.fit_transform(X_train_scaled)
X_test_scaled = imputer.transform(X_test_scaled)

imputer_y = SimpleImputer(strategy='mean')  # or 'median'
y_train_imputed = imputer_y.fit_transform(y_train.values.reshape(-1, 1)).ravel()

lr = LinearRegression()
lr.fit(X_train_scaled, y_train_imputed)
y_pred_lr = lr.predict(X_test_scaled)

from sklearn.impute import SimpleImputer

imputer_y_test = SimpleImputer(strategy='mean')
y_test_imputed = imputer_y_test.fit_transform(y_test.values.reshape(-1, 1)).ravel()

print('Linear Regression:')
print('R2:', r2_score(y_test_imputed, y_pred_lr))
print('MAE:', mean_absolute_error(y_test_imputed, y_pred_lr))
print('RMSE:', np.sqrt(mean_squared_error(y_test_imputed, y_pred_lr)))

ridge = Ridge()
lasso = Lasso()

params = {'alpha':[0.01,0.1,1,10,100]}

from sklearn.impute import SimpleImputer

imputer_y_train = SimpleImputer(strategy='mean')
y_train_imputed = imputer_y_train.fit_transform(y_train.values.reshape(-1, 1)).ravel()

ridge_cv = GridSearchCV(ridge, params, scoring='r2', cv=5)
ridge_cv.fit(X_train_scaled, y_train_imputed)

lasso_cv = GridSearchCV(lasso, params, scoring='r2', cv=5)
lasso_cv.fit(X_train_scaled, y_train_imputed)

print('Best Ridge alpha:', ridge_cv.best_params_, 'Score:', ridge_cv.best_score_)
print('Best Lasso alpha:', lasso_cv.best_params_, 'Score:', lasso_cv.best_score_)

y_pred_ridge = ridge_cv.best_estimator_.predict(X_test_scaled)
y_pred_lasso = lasso_cv.best_estimator_.predict(X_test_scaled)

print('Ridge R2:', r2_score(y_test_imputed, y_pred_ridge))
print('Lasso R2:', r2_score(y_test_imputed, y_pred_lasso))

plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred_lr, alpha=0.7)
plt.xlabel('Actual Mileage')
plt.ylabel('Predicted Mileage')
plt.title('Actual vs Predicted (Linear Regression)')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()

residuals = y_test - y_pred_lr
plt.figure(figsize=(6,4))
sns.histplot(residuals, kde=True)
plt.title('Residual Distribution (Linear Regression)')
plt.show()

example = np.array([[2000, 2020, 5]])


example_df = pd.DataFrame(example, columns=['Engine_CC', 'Year', 'Seating_Capacity'])
example_df['Approx_Weight'] = example_df['Engine_CC'] * example_df['Seating_Capacity'] * 0.5


example_features = example_df[['Engine_CC', 'Year', 'Approx_Weight']]


example_scaled = scaler.transform(example_features)


predicted_mileage = lr.predict(example_scaled)
print('Predicted Mileage for example car:', predicted_mileage[0])